from keras.preprocessing.image import ImageDataGenerator

# create a new generator
imagegen = ImageDataGenerator()

# load train data
train = imagegen.flow_from_directory("C:/D/ML/CNN/imagenette2/imagenette2/train/", class_mode="categorical", shuffle=False, batch_size=128, target_size=(224, 224))
Found 9469 images belonging to 10 classes.

val = imagegen.flow_from_directory("C:/D/ML/CNN/imagenette2/imagenette2/val/", class_mode="categorical", shuffle=False, batch_size=128, target_size=(224, 224))
Found 3925 images belonging to 10 classes.

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense, InputLayer, BatchNormalization, Dropout

# build a sequential model

model = Sequential()
model.add(InputLayer(input_shape=(224, 224, 3)))

# 1st conv block
model.add(Conv2D(25, (5, 5), activation='relu', strides=(1, 1), padding='same'))
model.add(MaxPool2D(pool_size=(2, 2), padding='same'))
# 2nd conv block
model.add(Conv2D(50, (5, 5), activation='relu', strides=(2, 2), padding='same'))
model.add(MaxPool2D(pool_size=(2, 2), padding='same'))
model.add(BatchNormalization())
# 3rd conv block
model.add(Conv2D(70, (3, 3), activation='relu', strides=(2, 2), padding='same'))
model.add(MaxPool2D(pool_size=(2, 2), padding='same'))
model.add(BatchNormalization())

# ANN block
model.add(Flatten())
model.add(Dense(units=100, activation='relu'))
model.add(Dense(units=100, activation='relu'))
model.add(Dropout(0.25))

# output layer
model.add(Dense(units=10, activation='softmax'))

# compile model
model.compile(loss='categorical_crossentropy', optimizer="adam", metrics=['accuracy'])

# fit on data for 30 epochs
model.fit_generator(train, epochs=30, validation_data=val)
Epoch 1/30
74/74 [==============================] - 545s 7s/step - loss: 2.4805 - accuracy: 0.0745 - val_loss: 2.3029 - val_accuracy: 0.1029
Epoch 2/30
74/74 [==============================] - 377s 5s/step - loss: 2.3705 - accuracy: 0.1005 - val_loss: 2.3023 - val_accuracy: 0.1057
Epoch 3/30
74/74 [==============================] - 369s 5s/step - loss: 2.3429 - accuracy: 0.0821 - val_loss: 2.3036 - val_accuracy: 0.1106
Epoch 4/30
74/74 [==============================] - 370s 5s/step - loss: 2.3182 - accuracy: 0.0995 - val_loss: 2.3007 - val_accuracy: 0.1075
Epoch 5/30
74/74 [==============================] - 371s 5s/step - loss: 2.3066 - accuracy: 0.1171 - val_loss: 2.2950 - val_accuracy: 0.1406
Epoch 6/30
74/74 [==============================] - 371s 5s/step - loss: 2.2957 - accuracy: 0.1259 - val_loss: 2.3104 - val_accuracy: 0.0897
Epoch 7/30
74/74 [==============================] - 370s 5s/step - loss: 2.2631 - accuracy: 0.1729 - val_loss: 2.3190 - val_accuracy: 0.1017
Epoch 8/30
74/74 [==============================] - 372s 5s/step - loss: 2.2554 - accuracy: 0.1673 - val_loss: 2.5231 - val_accuracy: 0.0940
Epoch 9/30
74/74 [==============================] - 373s 5s/step - loss: 2.1724 - accuracy: 0.2145 - val_loss: 2.3182 - val_accuracy: 0.1062
Epoch 10/30
74/74 [==============================] - 374s 5s/step - loss: 1.9871 - accuracy: 0.2685 - val_loss: 2.5471 - val_accuracy: 0.1011
Epoch 11/30
74/74 [==============================] - 371s 5s/step - loss: 1.8342 - accuracy: 0.3070 - val_loss: 3.1477 - val_accuracy: 0.0879
Epoch 12/30
74/74 [==============================] - 371s 5s/step - loss: 1.6947 - accuracy: 0.3408 - val_loss: 3.2463 - val_accuracy: 0.0711
Epoch 13/30
74/74 [==============================] - 367s 5s/step - loss: 1.5845 - accuracy: 0.4071 - val_loss: 3.5530 - val_accuracy: 0.0815
Epoch 14/30
74/74 [==============================] - 369s 5s/step - loss: 1.5024 - accuracy: 0.4230 - val_loss: 3.2556 - val_accuracy: 0.0966
Epoch 15/30
74/74 [==============================] - 368s 5s/step - loss: 1.4033 - accuracy: 0.4559 - val_loss: 2.6373 - val_accuracy: 0.1146
Epoch 16/30
74/74 [==============================] - 390s 5s/step - loss: 1.1570 - accuracy: 0.5636 - val_loss: 3.0803 - val_accuracy: 0.1057
Epoch 17/30
74/74 [==============================] - 604s 8s/step - loss: 1.0607 - accuracy: 0.5995 - val_loss: 3.6038 - val_accuracy: 0.0910
Epoch 18/30
74/74 [==============================] - 562s 8s/step - loss: 1.0458 - accuracy: 0.6125 - val_loss: 3.4974 - val_accuracy: 0.0879
Epoch 19/30
74/74 [==============================] - 565s 8s/step - loss: 1.0208 - accuracy: 0.6119 - val_loss: 3.2952 - val_accuracy: 0.0953
Epoch 20/30
74/74 [==============================] - 654s 9s/step - loss: 0.8039 - accuracy: 0.7027 - val_loss: 3.8279 - val_accuracy: 0.1062
Epoch 21/30
74/74 [==============================] - 1087s 15s/step - loss: 0.6732 - accuracy: 0.7841 - val_loss: 3.2840 - val_accuracy: 0.1108
Epoch 22/30
74/74 [==============================] - 1597s 22s/step - loss: 1.0251 - accuracy: 0.6201 - val_loss: 3.4663 - val_accuracy: 0.1167
Epoch 23/30
74/74 [==============================] - 913s 12s/step - loss: 0.8950 - accuracy: 0.6634 - val_loss: 3.6354 - val_accuracy: 0.1070
Epoch 24/30
74/74 [==============================] - 539s 7s/step - loss: 0.7645 - accuracy: 0.7125 - val_loss: 3.8212 - val_accuracy: 0.1052
Epoch 25/30
74/74 [==============================] - 519s 7s/step - loss: 0.5395 - accuracy: 0.8405 - val_loss: 3.8804 - val_accuracy: 0.1080
Epoch 26/30
74/74 [==============================] - 453s 6s/step - loss: 0.4907 - accuracy: 0.8682 - val_loss: 4.3925 - val_accuracy: 0.1032
Epoch 27/30
74/74 [==============================] - 442s 6s/step - loss: 0.4810 - accuracy: 0.8502 - val_loss: 4.3229 - val_accuracy: 0.1032
Epoch 28/30
74/74 [==============================] - 452s 6s/step - loss: 0.4260 - accuracy: 0.8815 - val_loss: 4.4715 - val_accuracy: 0.1057
Epoch 29/30
74/74 [==============================] - 443s 6s/step - loss: 0.5805 - accuracy: 0.8124 - val_loss: 4.8916 - val_accuracy: 0.1052
Epoch 30/30
74/74 [==============================] - 436s 6s/step - loss: 0.6190 - accuracy: 0.7967 - val_loss: 4.5964 - val_accuracy: 0.1042
Out[78]: <tensorflow.python.keras.callbacks.History at 0x15fd1f263c8>
