from keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten
from keras.utils import np_utils

from sklearn.metrics import accuracy_score

# loading the dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# building the input vector from the 28x28 pixels
X_train = X_train.reshape(X_train.shape[0], 28, 28, 1)
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# normalizing the data to help with the training
X_train /= 255
X_test /= 255

# one-hot encoding using keras' numpy-related utilities
n_classes = 10
print("Shape before one-hot encoding: ", y_train.shape)
Y_train = np_utils.to_categorical(y_train, n_classes)
Y_test = np_utils.to_categorical(y_test, n_classes)
print("Shape after one-hot encoding: ", Y_train.shape)

# building a linear stack of layers with the sequential model
model = Sequential()
# convolutional layer
model.add(Conv2D(25, kernel_size=(3,3), strides=(1,1), padding='valid', activation='relu', input_shape=(28,28,1)))
model.add(MaxPool2D(pool_size=(1,1)))
# flatten output of conv
model.add(Flatten())
# hidden layer
model.add(Dense(100, activation='relu'))
# output layer
model.add(Dense(10, activation='softmax'))

# compiling the sequential model
model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam')

# training the model for 10 epochs
model.fit(X_train, Y_train,batch_size=128, epochs=10, validation_data=(X_test, Y_test))
Train on 60000 samples, validate on 10000 samples
Epoch 1/10
60000/60000 [==============================] - 28s 472us/sample - loss: 0.1955 - accuracy: 0.9435 - val_loss: 0.0835 - val_accuracy: 0.9735
Epoch 2/10
60000/60000 [==============================] - 32s 533us/sample - loss: 0.0577 - accuracy: 0.9826 - val_loss: 0.0535 - val_accuracy: 0.9828
Epoch 3/10
60000/60000 [==============================] - 323s 5ms/sample - loss: 0.0334 - accuracy: 0.9897 - val_loss: 0.0566 - val_accuracy: 0.9828
Epoch 4/10
60000/60000 [==============================] - 20s 329us/sample - loss: 0.0218 - accuracy: 0.9933 - val_loss: 0.0495 - val_accuracy: 0.9851
Epoch 5/10
60000/60000 [==============================] - 19s 313us/sample - loss: 0.0129 - accuracy: 0.9961 - val_loss: 0.0570 - val_accuracy: 0.9830
Epoch 6/10
60000/60000 [==============================] - 19s 310us/sample - loss: 0.0102 - accuracy: 0.9968 - val_loss: 0.0523 - val_accuracy: 0.9841
Epoch 7/10
60000/60000 [==============================] - 18s 301us/sample - loss: 0.0061 - accuracy: 0.9983 - val_loss: 0.0578 - val_accuracy: 0.9845
Epoch 8/10
60000/60000 [==============================] - 18s 308us/sample - loss: 0.0043 - accuracy: 0.9989 - val_loss: 0.0597 - val_accuracy: 0.9853
Epoch 9/10
60000/60000 [==============================] - 18s 304us/sample - loss: 0.0060 - accuracy: 0.9981 - val_loss: 0.0748 - val_accuracy: 0.9818
Epoch 10/10
60000/60000 [==============================] - 18s 302us/sample - loss: 0.0055 - accuracy: 0.9981 - val_loss: 0.0743 - val_accuracy: 0.9826
Out[33]: <tensorflow.python.keras.callbacks.History at 0x15fcfbcf160>
